(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{170:function(t,e,r){},175:function(t,e,r){"use strict";var a=r(170);r.n(a).a},191:function(t,e,r){"use strict";r.r(e);r(175);var a=r(0),i=Object(a.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("div",{staticClass:"content"},[r("h1",{attrs:{id:"java设计模式简介"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#java设计模式简介","aria-hidden":"true"}},[t._v("#")]),t._v(" JAVA设计模式简介")]),t._v(" "),r("h2",{attrs:{id:"概念"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#概念","aria-hidden":"true"}},[t._v("#")]),t._v(" 概念")]),t._v(" "),r("p",[t._v("设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。")]),t._v(" "),r("h3",{attrs:{id:"分类"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#分类","aria-hidden":"true"}},[t._v("#")]),t._v(" 分类")]),t._v(" "),r("p",[t._v("我们通常说的设计模式总共有23种，这些模式主要分为以下三类")]),t._v(" "),r("h4",{attrs:{id:"创建型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#创建型","aria-hidden":"true"}},[t._v("#")]),t._v(" 创建型")]),t._v(" "),r("p",[t._v("这类模式提供了一种创建对象的方式并隐藏创建逻辑的方式，而不是使用new来实例化对象")]),t._v(" "),r("h4",{attrs:{id:"结构型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#结构型","aria-hidden":"true"}},[t._v("#")]),t._v(" 结构型")]),t._v(" "),r("p",[t._v("这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式")]),t._v(" "),r("h4",{attrs:{id:"创建型-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#创建型-2","aria-hidden":"true"}},[t._v("#")]),t._v(" 创建型")]),t._v(" "),r("p",[t._v("这些设计模式特别关注对象之间的通信")]),t._v(" "),r("table",[r("thead",[r("tr",[r("th",[t._v("分类")]),t._v(" "),r("th",[t._v("设计模式")])])]),t._v(" "),r("tbody",[r("tr",[r("td",[t._v("创建型模式")]),t._v(" "),r("td",[t._v("工厂模式（Factory Pattern) "),r("br"),t._v("抽象工厂模式（Abstract Factory Pattern）"),r("br"),t._v("单例模式（Singleton Pattern）"),r("br"),t._v("建造者模式（Builder Pattern）"),r("br"),t._v("原型模式（Prototype Pattern）")])]),t._v(" "),r("tr",[r("td",[t._v("结构型模式")]),t._v(" "),r("td",[t._v("适配器模式（Adapter Pattern）"),r("br"),t._v("桥接模式（Bridge Pattern）"),r("br"),t._v("过滤器模式（Filter、Criteria Pattern）"),r("br"),t._v("组合模式（Composite Pattern）"),r("br"),t._v("装饰器模式（Decorator Pattern）"),r("br"),t._v("外观模式（Facade Pattern）"),r("br"),t._v("享元模式（Flyweight Pattern）"),r("br"),t._v("代理模式（Proxy Pattern）")])]),t._v(" "),r("tr",[r("td",[t._v("行为型模式")]),t._v(" "),r("td",[t._v("责任链模式（Chain of Responsibility Pattern）"),r("br"),t._v("命令模式（Command Pattern）"),r("br"),t._v("解释器模式（Interpreter Pattern）"),r("br"),t._v("迭代器模式（Iterator Pattern）"),r("br"),t._v("中介者模式（Mediator Pattern）"),r("br"),t._v("备忘录模式（Memento Pattern）"),r("br"),t._v("状态模式（State Pattern"),r("br"),t._v("观察者模式（Observer Pattern）"),r("br"),t._v("策略模式（Strategy Pattern）"),r("br"),t._v("访问者模式（Visitor Pattern)"),r("br"),t._v("模板模式（Template Pattern）")])])])]),t._v(" "),r("p",[t._v("通常来说，设计模式都是混合使用，不会独立应用。利用穷举法充分理解设计模式的应用场景。在平时 的应用中，不是用设计模式去生搬硬套，而是根据具体业务问题需要时借鉴。")]),t._v(" "),r("h3",{attrs:{id:"六大原则"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#六大原则","aria-hidden":"true"}},[t._v("#")]),t._v(" 六大原则")]),t._v(" "),r("h4",{attrs:{id:"开闭原则-open-close-principle"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#开闭原则-open-close-principle","aria-hidden":"true"}},[t._v("#")]),t._v(" 开闭原则(Open Close Principle)")]),t._v(" "),r("p",[t._v("开闭原则就是说对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。所以一句话概括就是:为了使程序的扩展性好，易于维护和升级。想要达到这样的 效果，我们需要使用接口和抽象类。")]),t._v(" "),r("h4",{attrs:{id:"里氏代换原则-liskov-substitution-principle"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#里氏代换原则-liskov-substitution-principle","aria-hidden":"true"}},[t._v("#")]),t._v(" 里氏代换原则(Liskov Substitution Principle)")]),t._v(" "),r("p",[t._v("里氏代换原则(Liskov Substitution Principle LSP)面向对象设计的基本原则之一。 里氏代换原 则中说，任何基类可以出现的地方，子类一定可以出现。 LSP 是继承复用的基石，只有当衍生类可以 替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增 加新的行为。里氏代换原则是对“开-闭”原则的补充。实现“开-闭”原则的关键步骤就是抽象化。而 基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。")]),t._v(" "),r("h4",{attrs:{id:"依赖倒转原则-dependence-inversion-principle"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#依赖倒转原则-dependence-inversion-principle","aria-hidden":"true"}},[t._v("#")]),t._v(" 依赖倒转原则(Dependence Inversion Principle)")]),t._v(" "),r("p",[t._v("这个是开闭原则的基础，具体内容:针对接口编程，依赖于抽象而不依赖于具体。")]),t._v(" "),r("h4",{attrs:{id:"接口隔离原则-interface-segregation-principle"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#接口隔离原则-interface-segregation-principle","aria-hidden":"true"}},[t._v("#")]),t._v(" 接口隔离原则(Interface Segregation Principle)")]),t._v(" "),r("p",[t._v("这个原则的意思是:使用多个隔离的接口，比使用单个接口要好。还是一个降低类之间的耦合度的意思， 从这儿我们看出，其实设计模式就是一个软件的设计思想，从大型软件架构出发，为了升级和维护方便。 所以上文中多次出现:降低依赖，降低耦合。")]),t._v(" "),r("h4",{attrs:{id:"迪米特法则-最少知道原则-demeter-principle"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#迪米特法则-最少知道原则-demeter-principle","aria-hidden":"true"}},[t._v("#")]),t._v(" 迪米特法则(最少知道原则)(Demeter Principle)")]),t._v(" "),r("p",[t._v("为什么叫最少知道原则，就是说:一个实体应当尽量少的与其他实体之间发生相互作用，使得系统功能 模块相对独立。")]),t._v(" "),r("h4",{attrs:{id:"合成复用原则-composite-reuse-principle"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#合成复用原则-composite-reuse-principle","aria-hidden":"true"}},[t._v("#")]),t._v(" 合成复用原则(Composite Reuse Principle)")]),t._v(" "),r("p",[t._v("原则是尽量使用合成/聚合的方式，而不是使用继承。")])])}],!1,null,null,null);i.options.__file="pattern-introduce.md";e.default=i.exports}}]);